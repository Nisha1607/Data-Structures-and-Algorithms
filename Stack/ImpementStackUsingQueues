class MyStack {

    Queue<Integer> q1 = new LinkedList<>();
    Queue<Integer> q2 = new LinkedList<>();
    public MyStack() {
      q1 = new LinkedList<>();
      q2 = new LinkedList<>();
    }
    
    public void push(int x) {
           q2.add(x);
           while(!q1.isEmpty()){
                q2.add(q1.poll());
           }
           while(!q2.isEmpty()){
            q1.add(q2.poll());
           }
           return;
    }
    
    public int pop() {
        return q1.poll();
    }
    
    public int top() {
        return q1.peek();
    }
    
    public boolean empty() {
        return q1.isEmpty();
    }
}



Using only 1 Queue :

class MyStack {

    Queue<Integer> q1 = new LinkedList<>();
    public MyStack() {
      q1 = new LinkedList<>();
    }
    
    public void push(int x) {
        q1.add(x);
        for(int i=0;i<q1.size()-1;i++){
            q1.add(q1.poll());
        }   
        return;
    }
    
    public int pop() {
        return q1.poll();
    }
    
    public int top() {
        return q1.peek();
    }
    
    public boolean empty() {
        return q1.isEmpty();
    }
}

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack obj = new MyStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * boolean param_4 = obj.empty();
 */








