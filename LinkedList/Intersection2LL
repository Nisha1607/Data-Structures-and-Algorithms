public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
     ArrayList<ListNode> arr1 = new ArrayList<>();
     ArrayList<ListNode> arr2 = new ArrayList<>();
     while(headA!=null){
        arr1.add(headA);
        headA=headA.next;
     }
     while(headB!=null){
        arr2.add(headB);
        headB=headB.next;
     }
     for(int i=0;i<Math.min(arr1.size(),arr2.size());i++){
        if(arr1.size()>arr2.size()){
            if(arr1.contains(arr2.get(i))){
                return arr2.get(i++);
            }
        }
        else{
              if(arr2.contains(arr1.get(i))){
                return arr1.get(i++);
            }
        }
     }
     return null;
    }


public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
     ListNode tmp = headA;
     int len1=0;
     while(tmp!=null){
        len1++;
        tmp=tmp.next;
     }
     tmp = headB;
     int len2=0;
     while(tmp!=null){
        len2++;
        tmp=tmp.next;
     }
     int diff;
     if(len2>len1){
        diff = len2 - len1;
        while(diff -- > 0){
            headB=headB.next;
        }
     }
     else{
        diff = len1 - len2;
        while(diff-- > 0){
            headA=headA.next;
        }
     }
     while(headA!=null){
        if(headA == headB){
            return headA;
        }
        headA=headA.next;
        headB=headB.next;
     }
     return null;
    }




 public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
      
     ListNode l1 = headA, l2 = headB;

        while( l1 != l2){
            l1 = l1==null?headB:l1.next;
            l2 = l2==null?headA:l2.next;
        }
        return l1;

    }
